import { GetStaticProps, InferGetServerSidePropsType, type NextPage } from "next";
import Head from "next/head";
import { SignInButton } from "@clerk/nextjs";
import { api, RouterOutputs } from "~/utils/api";
import { createProxySSGHelpers } from '@trpc/react-query/ssg';
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import superjson from "superjson"
import { PageLayout } from "~/components/Layout";
import Image from "next/image";
import Link from "next/link";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime"
import { LoadingPage } from "~/components/Spinner";
import PostView from "~/components/PostView";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";

dayjs.extend(relativeTime)


const ProfileFeed = ({ slug }: { slug: string }) => {
    const { data, isLoading } = api.posts.getPostsByUserId.useQuery({ userId: slug })

    if (isLoading) return <LoadingPage />
    if (!data || data.length === 0) return <div>User has not posted</div>

    return (
        <div className="flex flex-col">
            {data.map((fullPost) => (
                <PostView {...fullPost} key={fullPost.post.id} />
            ))}
        </div>
    )
}



const Profile: NextPage<{ slug: string }> = ({ slug }) => {

    const { data, isLoading } = api.profile.getUserById.useQuery({ id: slug })
    if (isLoading) return <div>Loading...</div>
    if (!data) return <div>404</div>

    return (
        <>
            <Head>
                <title>{data.username}</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <PageLayout>
                <div className=" bg-slate-600 h-36 relative">
                    <Image src={data.profileImageUrl} alt="profile" height={128} width={128} className="-mb-[64px] absolute bottom-0 left-0 ml-4 rounded-full border-4 border-black" />
                </div>
                <div className="h-[64px]" />
                <div className="p-4 text-2xl font-bold">
                    {data.username ?? ""}
                </div>
                <div className="border-b border-slate-200 w-full" />
                <ProfileFeed slug={slug} />
            </PageLayout>
        </>
    );
};

export const getStaticProps: GetStaticProps = async (context) => {
    const ssg = generateSSGHelper()
    const slug = context.params?.slug
    if (typeof slug !== 'string') throw new Error("No slug :(")
    await ssg.profile.getUserById.prefetch({ id: slug })
    return {
        props: {
            trpcState: ssg.dehydrate(),
            slug
        }
    }
}

export const getStaticPaths = () => {
    return {
        paths: [],
        fallback: "blocking"
    }
}

export default Profile;